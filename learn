1：git diff 是比较工作环境和缓存区的不同,所以git add 后,git diff 就不会显示出不同了.
2: git diff --cache是比较缓存区和上次提交是快照的不同
3: git diff --staged 是显示出下次要提交的内容
4: git reset 是将本地的快照回复到本地快照的上一个版本(不会影响本地的工作环境和缓存区)
5: git pull 是将远程的分支拉到本地并与本地的最新快照合并,相当与git fetch后git merge（可能会出现冲突）
6: git push将自己上次提交的快照上传到远程分支(需要另一个分支选择接受并且合并(有可能会冲突), 或拒绝接受)
7: python 继承的初步理解，由于溯源机制的存在,即子类中找不到的变量或方法会依次向上的父类中寻找，所以不同的子类分别重写父类的某些方法变量,而公用的
   方法和变量可以继承父类中的。
8：tornado 异步的比较好的实践：
	由于tornado是单线程，而异步代码比较难写，所以我们可以用多线程来解决这个问题。
	1：创建一个任务队列,tornado接收到的任务带上灰调函数后都放进任务队列里。
	2：创建一个线程池，分别从任务队列里取出任务，解决任务。
	3：通过回调返回请求的结果。
   这样,就可以将"接受请求"和"处理请求"分别在不同的线程里解决。(注意GIL对线程的影响，多线程适用于解决I/O高并发的问题。)
9：redis应用遇到的问题：
   我们在使用redis时，经常会遇到这样的情形:从redis里取出一个key，对此进行处理后，再写入redis。
   虽然redis是单线程的，不存在原子操作的问题。但是多线程在这个情形下操作同一个key时,就会出现原子问题.(是自己的,而不是redis的)
   解决办法:
	1: 使用hash类型,可以直接操作用一key的不同列。
	2: 加锁(redis的set的高级用发)

	
